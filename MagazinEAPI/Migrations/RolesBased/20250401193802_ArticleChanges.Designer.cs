// <auto-generated />
using System;
using MagazinEAPI.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MagazinEAPI.Migrations.RolesBased
{
    [DbContext(typeof(RolesBasedContext))]
    [Migration("20250401193802_ArticleChanges")]
    partial class ArticleChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeOfPublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPremium")
                        .HasColumnType("bit");

                    b.Property<bool>("isPublished")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Comment.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ParentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Comment.CommentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagedById")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportAuthorId")
                        .HasColumnType("int");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ManagedById");

                    b.HasIndex("ReportAuthorId");

                    b.ToTable("CommentReports");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Comment.Dislike", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Dislikes");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Comment.Like", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.PhotoArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("PhotoArticles");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.TagArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagArticles");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Requests.PublishRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublishState")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("PublishRequests");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Requests.RegisterRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuccesfull")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RegisterRequests");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Requests.UnbanRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BanId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SolvedById")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BanId");

                    b.HasIndex("SolvedById");

                    b.ToTable("UnbanRequests");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Admins.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "2c5w174e-3b0e-446f-86af-483d56fd7214"
                        });
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Description = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Description = "Reader",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            Description = "Editor",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7213",
                            Description = "HeadEditor",
                            Name = "HeadEditor",
                            NormalizedName = "HEADEDITOR"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7214",
                            Description = "Journalist",
                            Name = "Journalist",
                            NormalizedName = "JOURNALIST"
                        });
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5w174e-3b0e-446f-86af-483d56fd7214",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "599c3aa8-eda2-4861-a51d-5c6ba68596c0",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGjtaYT1QQugEtDzxCHL5AD80LCJ9rX+EAYl44HijtqzIHZXfphoRhNjjBW2WujvIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5ba1859-83da-4fed-b0b8-965f2b80d3ea",
                            State = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2c5w174e-3b0e-486f-86af-483d56fd7213",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd2d325e-0c77-4a07-9b08-42ed37020384",
                            Email = "headeditor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HEADEDITOR@EXAMPLE.COM",
                            NormalizedUserName = "HEADEDITOR",
                            PasswordHash = "AQAAAAIAAYagAAAAENKzyCo5g+I320Z15/ZxFZopnss/ggALZ73kN4z2QWrVG+NRZz9bk7L+w7dSBYa4Ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd7090c7-30a5-46d5-9e05-815f38bbd6ab",
                            State = 0,
                            TwoFactorEnabled = false,
                            UserName = "HeadEditor"
                        },
                        new
                        {
                            Id = "2c5w179e-3b0e-446f-86af-483d56fd7212",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd2d323e-0c77-4a07-9b08-42ed37020384",
                            Email = "editor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITOR@EXAMPLE.COM",
                            NormalizedUserName = "EDITOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDaQJNcmsFaqlvYpylJ8LL9S9aYOCTsB7PtdbsCQsymITYP5lz9PK77Q3FJw+xFmGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd709037-30a5-46d5-9e05-815f38bbd6ab",
                            State = 0,
                            TwoFactorEnabled = false,
                            UserName = "Editor"
                        },
                        new
                        {
                            Id = "2c5w174r-3b0e-446f-86af-483d56fd7214",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd2d323e-0c77-4a07-9b08-42ed38020384",
                            Email = "journalist@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOURNALIST@EXAMPLE.COM",
                            NormalizedUserName = "JOURNALIST",
                            PasswordHash = "AQAAAAIAAYagAAAAEOAXkcsy7IiVg45vv09dUPqtwHOzbwnO1kOLG7lC4iVA9G8VOr2qjWxBcGtQN1zC+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd709037-30a5-46d5-9e05-815f38b6d6ab",
                            State = 0,
                            TwoFactorEnabled = false,
                            UserName = "Journalist"
                        },
                        new
                        {
                            Id = "2c5w174r-3b0e-446f-86af-483d56fd7211",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd2d323e-0c77-4a07-9b08-422d38020384",
                            Email = "reader@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "READER@EXAMPLE.COM",
                            NormalizedUserName = "READER",
                            PasswordHash = "AQAAAAIAAYagAAAAECAtlY2RA/vjLYvmweL9IBRZJl25Few+FUY8QMsC3/rJADAsQxzWxlD4QR4/ZJoSAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd709037-30a5-46d5-9e05-515f38b6d6ab",
                            State = 0,
                            TwoFactorEnabled = false,
                            UserName = "reader"
                        });
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BanEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BanStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Editors.Editor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HeadEditorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Editors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "2c5w179e-3b0e-446f-86af-483d56fd7212",
                            HeadEditorId = 1
                        });
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Editors.HeadEditor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("HeadEditors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "2c5w174e-3b0e-486f-86af-483d56fd7213"
                        });
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Editors.TagEditor", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("EditorId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "EditorId");

                    b.HasIndex("EditorId");

                    b.ToTable("TagEditors");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Journalists.Journalist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HeadEditorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("HeadEditorId");

                    b.ToTable("Journalists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "2c5w174r-3b0e-446f-86af-483d56fd7214",
                            HeadEditorId = 1
                        });
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.FavoriteArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteArticles");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.OwnedArticles", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("OwnedArticles");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.TagUser", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TagUsers");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.ToReadArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ToReadArticles");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Readers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "2c5w174r-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2c5w174e-3b0e-446f-86af-483d56fd7214",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "2c5w174e-3b0e-486f-86af-483d56fd7213",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7213"
                        },
                        new
                        {
                            UserId = "2c5w179e-3b0e-446f-86af-483d56fd7212",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "2c5w174r-3b0e-446f-86af-483d56fd7214",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7214"
                        },
                        new
                        {
                            UserId = "2c5w174r-3b0e-446f-86af-483d56fd7211",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Article", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.Journalists.Journalist", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MagazinEAPI.Models.Users.Editors.Editor", "Reviewer")
                        .WithMany("Articles")
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Author");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Comment.Comment", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Admins.Admin", "DeletedBy")
                        .WithMany("DeletedComments")
                        .HasForeignKey("DeletedById");

                    b.HasOne("MagazinEAPI.Models.Articles.Comment.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Article");

                    b.Navigation("Author");

                    b.Navigation("DeletedBy");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Comment.CommentReport", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Comment.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Admins.Admin", "ManagedBy")
                        .WithMany("ManagedCommentReports")
                        .HasForeignKey("ManagedById");

                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "ReportAuthor")
                        .WithMany("ReportedComments")
                        .HasForeignKey("ReportAuthorId");

                    b.Navigation("Comment");

                    b.Navigation("ManagedBy");

                    b.Navigation("ReportAuthor");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Comment.Dislike", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Comment.Comment", "Comment")
                        .WithMany("Dislikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "User")
                        .WithMany("Dislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Comment.Like", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Comment.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.PhotoArticle", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Article", "Article")
                        .WithMany("PhotoArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Articles.Photo", "Photo")
                        .WithMany("PhotoArticles")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.TagArticle", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Article", "Article")
                        .WithMany("TagArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Articles.Tag", "Tag")
                        .WithMany("TagArticles")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Requests.PublishRequest", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Article", "Article")
                        .WithMany("PublishRequests")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Editors.Editor", "Reviewer")
                        .WithMany("PublishRequests")
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Article");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Requests.UnbanRequest", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.Ban", "Ban")
                        .WithMany("UnbanRequests")
                        .HasForeignKey("BanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Admins.Admin", "SolvedBy")
                        .WithMany("SolvedUnbanRequests")
                        .HasForeignKey("SolvedById");

                    b.Navigation("Ban");

                    b.Navigation("SolvedBy");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Admins.Admin", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationUser", "ApplicationUser")
                        .WithOne("Admin")
                        .HasForeignKey("MagazinEAPI.Models.Users.Admins.Admin", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Ban", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.Admins.Admin", "Admin")
                        .WithMany("Bans")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "User")
                        .WithMany("Bans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Editors.Editor", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationUser", "ApplicationUser")
                        .WithOne("Editor")
                        .HasForeignKey("MagazinEAPI.Models.Users.Editors.Editor", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Editors.HeadEditor", "HeadEditor")
                        .WithMany("EditorsUnder")
                        .HasForeignKey("Id");

                    b.Navigation("ApplicationUser");

                    b.Navigation("HeadEditor");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Editors.HeadEditor", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationUser", "ApplicationUser")
                        .WithOne("HeadEditor")
                        .HasForeignKey("MagazinEAPI.Models.Users.Editors.HeadEditor", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Editors.TagEditor", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.Editors.Editor", "Editor")
                        .WithMany("AllowedTagEditors")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Articles.Tag", "Tag")
                        .WithMany("TagEditors")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Journalists.Journalist", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationUser", "ApplicationUser")
                        .WithOne("Journalist")
                        .HasForeignKey("MagazinEAPI.Models.Users.Journalists.Journalist", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Editors.HeadEditor", "HeadEditor")
                        .WithMany("JournalistsUnder")
                        .HasForeignKey("HeadEditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("HeadEditor");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.FavoriteArticle", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Article", "Article")
                        .WithMany("FavoriteArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "User")
                        .WithMany("FavoriteArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.OwnedArticles", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Article", "Article")
                        .WithMany("OwnedToArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "User")
                        .WithMany("OwnedToArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.Subscription", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.TagUser", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Tag", "Tag")
                        .WithMany("TagUsers")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "User")
                        .WithMany("FavouriteTagUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.ToReadArticle", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Articles.Article", "Article")
                        .WithMany("ToReadArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.Readers.User", "User")
                        .WithMany("ToReadArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.User", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationUser", "ApplicationUser")
                        .WithOne("User")
                        .HasForeignKey("MagazinEAPI.Models.Users.Readers.User", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagazinEAPI.Models.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MagazinEAPI.Models.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoriteArticles");

                    b.Navigation("OwnedToArticles");

                    b.Navigation("PhotoArticles");

                    b.Navigation("PublishRequests");

                    b.Navigation("TagArticles");

                    b.Navigation("ToReadArticles");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Comment.Comment", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Dislikes");

                    b.Navigation("Likes");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Photo", b =>
                {
                    b.Navigation("PhotoArticles");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Articles.Tag", b =>
                {
                    b.Navigation("TagArticles");

                    b.Navigation("TagEditors");

                    b.Navigation("TagUsers");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Admins.Admin", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("DeletedComments");

                    b.Navigation("ManagedCommentReports");

                    b.Navigation("SolvedUnbanRequests");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.ApplicationUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Editor");

                    b.Navigation("HeadEditor");

                    b.Navigation("Journalist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Ban", b =>
                {
                    b.Navigation("UnbanRequests");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Editors.Editor", b =>
                {
                    b.Navigation("AllowedTagEditors");

                    b.Navigation("Articles");

                    b.Navigation("PublishRequests");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Editors.HeadEditor", b =>
                {
                    b.Navigation("EditorsUnder");

                    b.Navigation("JournalistsUnder");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Journalists.Journalist", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MagazinEAPI.Models.Users.Readers.User", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("Comments");

                    b.Navigation("Dislikes");

                    b.Navigation("FavoriteArticles");

                    b.Navigation("FavouriteTagUsers");

                    b.Navigation("Likes");

                    b.Navigation("OwnedToArticles");

                    b.Navigation("ReportedComments");

                    b.Navigation("Subscriptions");

                    b.Navigation("ToReadArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
